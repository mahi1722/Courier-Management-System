-- Create the database
CREATE DATABASE CourierManagementSystem;


USE CourierManagementSystem;

-- Create tables
CREATE TABLE User (
    UserID INT PRIMARY KEY,
    Name VARCHAR(255),
    Email VARCHAR(255) UNIQUE,
    Password VARCHAR(255),
    ContactNumber VARCHAR(20),
    Address TEXT
);

CREATE TABLE Courier (
    CourierID INT PRIMARY KEY,
    SenderName VARCHAR(255),
    SenderAddress TEXT,
    ReceiverName VARCHAR(255),
    ReceiverAddress TEXT,
    Weight DECIMAL(5, 2),
    Status VARCHAR(50),
    TrackingNumber VARCHAR(20) UNIQUE,
    DeliveryDate DATE,
    UserID INT,
    FOREIGN KEY (UserID) REFERENCES User(UserID)
);

CREATE TABLE CourierServices (
    ServiceID INT PRIMARY KEY,
    ServiceName VARCHAR(100),
    Cost DECIMAL(8, 2)
);

CREATE TABLE Employee (
    EmployeeID INT PRIMARY KEY,
    Name VARCHAR(255),
    Email VARCHAR(255) UNIQUE,
    ContactNumber VARCHAR(20),
    Role VARCHAR(50),
    Salary DECIMAL(10, 2)
);

CREATE TABLE Location (
    LocationID INT PRIMARY KEY,
    LocationName VARCHAR(100),
    Address TEXT
);

CREATE TABLE Payment (
    PaymentID INT PRIMARY KEY,
    CourierID INT,
    LocationID INT,
    Amount DECIMAL(10, 2),
    PaymentDate DATE,
    FOREIGN KEY (CourierID) REFERENCES Courier(CourierID),
    FOREIGN KEY (LocationID) REFERENCES Location(LocationID)
);

show tables;

-- Insert sample data
INSERT INTO User (UserID, Name, Email, Password, ContactNumber, Address)
VALUES 
(1, 'John Doe', 'john@work.com', 'password123', '123-456-7890', '123 Main St, City'),
(2, 'Jane Smith', 'jane@work.com', 'password456', '987-654-3210', '456 Elm St, Town');

INSERT INTO Courier (CourierID, SenderName, SenderAddress, ReceiverName, ReceiverAddress, Weight, Status, TrackingNumber, DeliveryDate, UserID)
VALUES 
(1, 'John Doe', '123 Main St, City', 'Alice Johnson', '789 Oak St, Village', 2.5, 'In Transit', 'TRK123456', '2024-09-25', 1),
(2, 'Jane Smith', '456 Elm St, Town', 'Bob Brown', '321 Pine St, Hamlet', 1.8, 'Delivered', 'TRK789012', '2024-09-20', 2);

INSERT INTO CourierServices (ServiceID, ServiceName, Cost)
VALUES 
(1, 'Standard Delivery', 10.00),
(2, 'Express Delivery', 20.00);

INSERT INTO Employee (EmployeeID, Name, Email, ContactNumber, Role, Salary)
VALUES 
(1, 'Mike Wilson', 'mike@courier.com', '555-1234', 'Driver', 35000.00),
(2, 'Sarah Lee', 'sarah@courier.com', '555-5678', 'Customer Service', 32000.00);

INSERT INTO Location (LocationID, LocationName, Address)
VALUES 
(1, 'City Center', '100 Main Plaza, City'),
(2, 'Suburb Hub', '200 Green Ave, Suburb');

INSERT INTO Payment (PaymentID, CourierID, LocationID, Amount, PaymentDate)
VALUES 
(1, 1, 1, 15.00, '2024-09-19'),
(2, 2, 2, 12.50, '2024-09-18');

-- SQL Queries

-- Task 2: Select, Where
-- 1. List all customers
SELECT * FROM User;

-- 2. List all orders for a specific customer
SELECT * FROM Courier WHERE UserID = 1;

-- 3. List all couriers
SELECT * FROM Courier;

-- 4. List all packages for a specific order (assuming order is equivalent to courier)
SELECT * FROM Courier WHERE CourierID = 1;

-- 5. List all deliveries for a specific courier
SELECT * FROM Courier WHERE CourierID = 1;

-- 6. List all undelivered packages
SELECT * FROM Courier WHERE Status != 'Delivered';

-- 7. List all packages that are scheduled for delivery today
SELECT * FROM Courier WHERE DeliveryDate = CURDATE();

-- 8. List all packages with a specific status
SELECT * FROM Courier WHERE Status = 'In Transit';

-- 9. Calculate the total number of packages for each courier
SELECT COUNT(*) as TotalPackages, UserID FROM Courier GROUP BY UserID;

-- 10. Find the average delivery time for each courier (assuming DeliveryDate is the completion date)
SELECT UserID, AVG(DATEDIFF(DeliveryDate, CURDATE())) as AvgDeliveryTime 
FROM Courier 
GROUP BY UserID;

-- 11. List all packages with a specific weight range
SELECT * FROM Courier WHERE Weight BETWEEN 1.0 AND 3.0;

-- 12. Retrieve employees whose names contain 'John'
SELECT * FROM Employee WHERE Name LIKE '%John%';

-- 13. Retrieve all courier records with payments greater than $50
SELECT c.* FROM Courier c
JOIN Payment p ON c.CourierID = p.CourierID
WHERE p.Amount > 50;

-- Task 3: GroupBy, Aggregate Functions, Having, Order By, Where

-- 14. Find the total number of couriers handled by each employee
SELECT e.EmployeeID, e.Name, COUNT(c.CourierID) as TotalCouriers
FROM Employee e
LEFT JOIN Courier c ON e.EmployeeID = c.UserID
GROUP BY e.EmployeeID, e.Name;

-- 15. Calculate the total revenue generated by each location
SELECT l.LocationID, l.LocationName, SUM(p.Amount) as TotalRevenue
FROM Location l
LEFT JOIN Payment p ON l.LocationID = p.LocationID
GROUP BY l.LocationID, l.LocationName;

-- 16. Find the total number of couriers delivered to each location
SELECT l.LocationID, l.LocationName, COUNT(c.CourierID) as TotalDeliveries
FROM Location l
LEFT JOIN Courier c ON l.LocationID = c.CourierID
GROUP BY l.LocationID, l.LocationName;

-- 17. Find the courier with the highest average delivery time
SELECT UserID, AVG(DATEDIFF(DeliveryDate, CURDATE())) as AvgDeliveryTime 
FROM Courier 
GROUP BY UserID
ORDER BY AvgDeliveryTime DESC
LIMIT 1;

-- 18. Find Locations with Total Payments Less Than a Certain Amount
SELECT l.LocationID, l.LocationName, SUM(p.Amount) as TotalPayments
FROM Location l
LEFT JOIN Payment p ON l.LocationID = p.LocationID
GROUP BY l.LocationID, l.LocationName
HAVING TotalPayments < 1000;

-- 19. Calculate Total Payments per Location
SELECT l.LocationID, l.LocationName, SUM(p.Amount) as TotalPayments
FROM Location l
LEFT JOIN Payment p ON l.LocationID = p.LocationID
GROUP BY l.LocationID, l.LocationName;

-- 20. Retrieve couriers who have received payments totaling more than $1000 in a specific location
SELECT c.CourierID, c.SenderName, SUM(p.Amount) as TotalPayments
FROM Courier c
JOIN Payment p ON c.CourierID = p.CourierID
WHERE p.LocationID = 1
GROUP BY c.CourierID, c.SenderName
HAVING TotalPayments > 1000;

-- 21. Retrieve couriers who have received payments totaling more than $1000 after a certain date
SELECT c.CourierID, c.SenderName, SUM(p.Amount) as TotalPayments
FROM Courier c
JOIN Payment p ON c.CourierID = p.CourierID
WHERE p.PaymentDate > '2024-01-01'
GROUP BY c.CourierID, c.SenderName
HAVING TotalPayments > 1000;

-- 22. Retrieve locations where the total amount received is more than $5000 before a certain date
SELECT l.LocationID, l.LocationName, SUM(p.Amount) as TotalAmount
FROM Location l
JOIN Payment p ON l.LocationID = p.LocationID
WHERE p.PaymentDate < '2024-12-31'
GROUP BY l.LocationID, l.LocationName
HAVING TotalAmount > 5000;





-- Task 4: Joins
-- 23. Retrieve Payments with Courier Information
SELECT p.*, c.SenderName, c.ReceiverName
FROM Payment p
INNER JOIN Courier c ON p.CourierID = c.CourierID;

-- 24. Retrieve Payments with Location Information
SELECT p.*, l.LocationName, l.Address
FROM Payment p
INNER JOIN Location l ON p.LocationID = l.LocationID;

-- 25. Retrieve Payments with Courier and Location Information
SELECT p.*, c.SenderName, c.ReceiverName, l.LocationName, l.Address
FROM Payment p
INNER JOIN Courier c ON p.CourierID = c.CourierID
INNER JOIN Location l ON p.LocationID = l.LocationID;

-- 26. List all payments with courier details
SELECT p.*, c.*
FROM Payment p
LEFT JOIN Courier c ON p.CourierID = c.CourierID;

-- 27. Total payments received for each courier
SELECT c.CourierID, c.SenderName, SUM(p.Amount) as TotalPayments
FROM Courier c
LEFT JOIN Payment p ON c.CourierID = p.CourierID
GROUP BY c.CourierID, c.SenderName;

-- 28. List payments made on a specific date
SELECT * FROM Payment WHERE PaymentDate = '2024-09-19';

-- 29. Get Courier Information for Each Payment
SELECT p.*, c.SenderName, c.ReceiverName, c.Status
FROM Payment p
LEFT JOIN Courier c ON p.CourierID = c.CourierID;

-- 30. Get Payment Details with Location
SELECT p.*, l.LocationName, l.Address
FROM Payment p
LEFT JOIN Location l ON p.LocationID = l.LocationID;

-- 31. Calculating Total Payments for Each Courier
SELECT c.CourierID, c.SenderName, COALESCE(SUM(p.Amount), 0) as TotalPayments
FROM Courier c
LEFT JOIN Payment p ON c.CourierID = p.CourierID
GROUP BY c.CourierID, c.SenderName;

-- 32. List Payments Within a Date Range
SELECT * FROM Payment 
WHERE PaymentDate BETWEEN '2024-09-01' AND '2024-09-30';

-- 33. Retrieve a list of all users and their corresponding courier records
SELECT u.*, c.*
FROM User u
LEFT JOIN Courier c ON u.UserID = c.UserID

UNION ALL

SELECT u.*, c.*
FROM User u
RIGHT JOIN Courier c ON u.UserID = c.UserID
WHERE u.UserID IS NULL;

-- 34. Retrieve a list of all couriers and their corresponding services
SELECT c.*, cs.*
FROM Courier c
LEFT JOIN CourierServices cs ON c.CourierID = cs.ServiceID

UNION ALL

SELECT c.*, cs.*
FROM Courier c
RIGHT JOIN CourierServices cs ON c.CourierID = cs.ServiceID
WHERE c.CourierID IS NULL;


-- 35. Retrieve a list of all employees and their corresponding payments
SELECT e.*, p.*
FROM Employee e
LEFT JOIN Payment p ON e.EmployeeID = p.PaymentID

UNION ALL

SELECT e.*, p.*
FROM Employee e
RIGHT JOIN Payment p ON e.EmployeeID = p.PaymentID
WHERE e.EmployeeID IS NULL;


-- 36. List all users and all courier services, showing all possible combinations
SELECT u.*, cs.*
FROM User u
CROSS JOIN CourierServices cs;

-- 37. List all employees and all locations, showing all possible combinations
SELECT e.*, l.*
FROM Employee e
CROSS JOIN Location l;

-- 38. Retrieve a list of couriers and their corresponding sender information
SELECT c.*, u.Name as SenderName, u.Email as SenderEmail
FROM Courier c
LEFT JOIN User u ON c.UserID = u.UserID;

-- 39. Retrieve a list of couriers and their corresponding receiver information
SELECT c.*, u.Name as ReceiverName, u.Email as ReceiverEmail
FROM Courier c
LEFT JOIN User u ON c.ReceiverName = u.Name;

-- 40. Retrieve a list of couriers along with the courier service details
SELECT c.*, cs.ServiceName, cs.Cost
FROM Courier c
LEFT JOIN CourierServices cs ON c.CourierID = cs.ServiceID;

-- 41. Retrieve a list of employees and the number of couriers assigned to each employee
SELECT e.EmployeeID, e.Name, COUNT(c.CourierID) as AssignedCouriers
FROM Employee e
LEFT JOIN Courier c ON e.EmployeeID = c.UserID
GROUP BY e.EmployeeID, e.Name;

-- 42. Retrieve a list of locations and the total payment amount received at each location
SELECT l.LocationID, l.LocationName, COALESCE(SUM(p.Amount), 0) as TotalPayments
FROM Location l
LEFT JOIN Payment p ON l.LocationID = p.LocationID
GROUP BY l.LocationID, l.LocationName;

-- 43. Retrieve all couriers sent by the same sender
SELECT c1.*
FROM Courier c1
JOIN Courier c2 ON c1.SenderName = c2.SenderName AND c1.CourierID != c2.CourierID;

-- 44. List all employees who share the same role
SELECT e1.*
FROM Employee e1
JOIN Employee e2 ON e1.Role = e2.Role AND e1.EmployeeID != e2.EmployeeID;

-- 45. Retrieve all payments made for couriers sent from the same location
SELECT p1.*
FROM Payment p1
JOIN Payment p2 ON p1.LocationID = p2.LocationID AND p1.PaymentID != p2.PaymentID;

-- 46. Retrieve all couriers sent from the same location
SELECT c1.*
FROM Courier c1
JOIN Courier c2 ON c1.SenderAddress = c2.SenderAddress AND c1.CourierID != c2.CourierID;

-- 47. List employees and the number of couriers they have delivered
SELECT e.EmployeeID, e.Name, COUNT(c.CourierID) as DeliveredCouriers
FROM Employee e
LEFT JOIN Courier c ON e.EmployeeID = c.UserID AND c.Status = 'Delivered'
GROUP BY e.EmployeeID, e.Name;

-- 48. Find couriers that were paid an amount greater than the cost of their respective courier services
SELECT c.*, p.Amount, cs.Cost
FROM Courier c
JOIN Payment p ON c.CourierID = p.CourierID
JOIN CourierServices cs ON c.CourierID = cs.ServiceID
WHERE p.Amount > cs.Cost;

-- 49. Find couriers that have a weight greater than the average weight of all couriers
SELECT *
FROM Courier
WHERE Weight > (SELECT AVG(Weight) FROM Courier);

-- 50. Find the names of all employees who have a salary greater than the average salary
SELECT Name
FROM Employee
WHERE Salary > (SELECT AVG(Salary) FROM Employee);

-- 51. Find the total cost of all courier services where the cost is less than the maximum cost
SELECT SUM(Cost)
FROM CourierServices
WHERE Cost < (SELECT MAX(Cost) FROM CourierServices);

-- 52. Find all couriers that have been paid for
SELECT c.*
FROM Courier c
WHERE EXISTS (SELECT 1 FROM Payment p WHERE p.CourierID = c.CourierID);

-- 53. Find the locations where the maximum payment amount was made
SELECT l.*
FROM Location l
WHERE EXISTS (
    SELECT 1
    FROM Payment p
    WHERE p.LocationID = l.LocationID
    AND p.Amount = (SELECT MAX(Amount) FROM Payment)
);

-- 54. Find all couriers whose weight is greater than the weight of all couriers sent by a specific sender (e.g., 'SenderName'):
SELECT *
FROM Courier
WHERE Weight > (
    SELECT AVG(Weight)
    FROM Courier
    WHERE SenderName = 'SenderName'
);
